Problem Description

Given an integer array A containing N distinct integers, you have to find all the leaders in the array A.

An element is leader if it is strictly greater than all the elements to its right side.

NOTE:The rightmost element is always a leader.



Problem Constraints

1 <= N <= 105

1 <= A[i] <= 108



Input Format

First and only argument is an integer array A.



Output Format

Return an integer array denoting all the leader elements of the array.

NOTE: Ordering in the output doesn't matter.



Example Input

Input 1:

 A = [16, 17, 4, 3, 5, 2]
Input 2:

 A = [1, 2]


Example Output

Output 1:

 [17, 2, 5]
Output 2:

 [2]


Example Explanation

Explanation 1:

 Element 17 is strictly greater than all the elements on the right side to it.
 Element 2 is strictly greater than all the elements on the right side to it.
 Element 5 is strictly greater than all the elements on the right side to it.
 So we will return this three elements i.e [17, 2, 5], we can also return [2, 5, 17] or [5, 2, 17] or any other ordering.
Explanation 2:

 Only 2 the rightmost element is the leader in the array.


//Soln - java 8

public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        /*
        * Approach 1 :- 
        *   1. Decalare and init max variable with last element of list and add to the list as it is always a leader
        *   2. Iterate through the loop in reverse direction and check if previous element of curr max is greater that it
        *      If it is greater than curr max add it to list and set max to curr element
        *   3. Finally Return the list
        *   4. TC = O(N) | SC = O(N)       
        */
        int max = A.get(A.size() - 1);
        ArrayList<Integer> list = new ArrayList<>();
        list.add(max);
        for(int i = A.size() - 2; i >= 0; --i){
            int temp = A.get(i);
            if(temp > max){
                list.add(temp);
                max = temp;
            }
        }
        return list;
    }
}