Problem Description
You are given an integer array A of length N comprising of 0's & 1's, and an integer B.

You have to tell all the indices of array A that can act as a centre of 2 * B + 1 length 0-1 alternating subarray.

A 0-1 alternating array is an array containing only 0's & 1's, and having no adjacent 0's or 1's. For e.g. arrays [0, 1, 0, 1], [1, 0] and [1] are 0-1 alternating, while [1, 1] and [0, 1, 0, 0, 1] are not.



Problem Constraints
1 <= N <= 105

A[i] equals to 0 or 1.

0 <= B <= (N - 1) / 2



Input Format
First argument is an integer array A.

Second argument is an integer B.



Output Format
Return an integer array containing indices(0-based) in sorted order. If no such index exists, return an empty integer array.



Example Input
Input 1:

 A = [1, 0, 1, 0, 1]
 B = 1 
Input 2:

 A = [0, 0, 0, 1, 1, 0, 1]
 B = 0 


Example Output
Output 1:

 [1, 2, 3]
Output 2:

 [0, 1, 2, 3, 4, 5, 6]


Example Explanation
Explanation 1:

 Index 1 acts as a centre of alternating sequence: [A0, A1, A2]
 Index 2 acts as a centre of alternating sequence: [A1, A2, A3]
 Index 3 acts as a centre of alternating sequence: [A2, A3, A4] 
Explanation 2:

 Each index in the array acts as the center of alternating sequences of lengths 1.


//Soln - java 8

public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, int B) {
        /*
        *   Approach :-
        *   1.  Calculate the length of subarry by given formula 2 * B + 1 it is always going to be odd
        *   2.  Create a arraylist to retrn the indices list
        *   3.  Start first loop from 0 to N - len i.e. len = (2*B+1)
        *   4.  set flag to zero
        *   5.  In second loop start iteration from both ends of subarray i.e. i and (i+len-1)
        *   6.  We will check three condition's for each iteration
                I.  A[start] != A[end] as arr length is always odd - or
                II. A[start] == A[start+1] or
                III.A[end] == A[end-1]
                If any of these is true then mark flag = 1
        *   7.  After second loop iterated fully check if flag != 1 if it is true then 
                add middle index of that subarry to the list
                I. Finding middle index = ((end - start) / 2) + start
                                        = (((i+len-1) -i) / 2) + i
        *   8. TC = O((N-len)+len) = O(N) || SC = O(N)
        */
        ArrayList<Integer> retList = new ArrayList<>();
        int len = 2 * B + 1;
        for(int i = 0; i <= A.size() - len; i++){
            int flag = 0;
            for(int start = i, end = (i + len - 1); start < end; start++, end--){
                if( A.get(start) != A.get(end) || 
                    A.get(start) == A.get(start+1) ||
                    A.get(end) == A.get(end-1)){

                        flag = 1;
                }
            }
            if(flag != 1){
                // index  = ((end -    start) / 2) + start 
                int index = (((i+len-1) - i) / 2) + i;
                retList.add(index);
            }
                
        }
        return retList;
    }
}
