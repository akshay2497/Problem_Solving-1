**Problem Description**

You are given an array A consisting of heights of Christmas trees, and an array B of same size consisting of the cost of each of the trees (Bi is the cost of tree Ai, where 1 ≤ i ≤ size(A)), and you are supposed to choose 3 trees (let's say, indices p, q and r), such that Ap < Aq < Ar, where p < q < r.
The cost of these trees is Bp + Bq + Br.

You are to choose 3 such trees, so they have the minimum cost and find the minimum cost.

If not possible to choose 3 such trees, return -1.



**Problem Constraints**

1 <= A[i], B[i] <= 109
3 <= size(A) = size(B) <= 3000



**Input Format**

First argument is an integer array A.
Second argument is an integer array B.



**Output Format**

Return an integer denoting the minimum cost of choosing 3 trees whose heights are strictly in increasing order, if not possible, -1.



**Example Input**

Input 1:

 A = [1, 3, 5]
 B = [1, 2, 3]
Input 2:

 A = [1, 6, 4, 2, 6, 9]
 B = [2, 5, 7, 3, 2, 7]


**Example Output**

Output 1:

 6 
Output 2:

 7 


**Example Explanation**

Explanation 1:

 We can choose the trees with indices 1, 2 and 3, and the cost is 1 + 2 + 3 = 6. 


//Soln - java 8


public class Solution {
    public int solve(int[] A, int[] B) {
        if(B.length < 3)
            return -1;
        /*
        //Brute Force :

        int sum = 0, ans = Integer.MAX_VALUE;
        int k = 3;
        for(int i = 0; i < B.length-k+1; i++){
            for(int j = i+1; j < B.length-k+2; j++){
                for(int l = j+1; l < B.length-k+3; l++){
                    if(A[i] < A[j] && A[j] < A[l]){
                        sum = B[i]+B[j]+B[l];
                        ans = Math.min(ans, sum);
                    }   
                }
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;
        */

        //Optimized solution
        int ans = Integer.MAX_VALUE;
        for(int i = 1; i < B.length-1; i++){
            //find the left minimum
            int lfmin = Integer.MAX_VALUE;
            for(int j = i - 1; j >= 0; j--){
                if(A[j] < A[i] && B[j] < lfmin){
                    lfmin = B[j];
                }
            }

            //Find the right minimum
            int rtmin = Integer.MAX_VALUE;
            for(int j = i+1; j < B.length; j++){
                if(A[j] > A[i] && B[j] < rtmin){
                    rtmin = B[j];
                }
            }
            if(lfmin != Integer.MAX_VALUE && rtmin != Integer.MAX_VALUE)
                ans = Math.min(ans, lfmin + rtmin + B[i]);
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
    
}
