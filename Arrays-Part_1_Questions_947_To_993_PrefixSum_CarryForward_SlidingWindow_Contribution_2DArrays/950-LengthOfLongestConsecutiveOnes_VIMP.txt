Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.


Input Format

The only argument given is string A.
Output Format

Return the length of the longest consecutive 1’s that can be achieved.
Constraints

1 <= length of string <= 1000000
A contains only characters 0 and 1.
For Example

Input 1:
    A = "111000"
Output 1:
    3

Input 2:
    A = "111011101"
Output 2:
    7


//Soln - java 8


public class Solution {
    public int solve(String A) {
        //Count the total number of ones in the string
        int count_ones = 0;
        for(int i = 0; i < A.length(); i++){
            if(A.charAt(i) == '1')
                count_ones++;
        }
        //Travese the whole string
        int ans = 0;
        for(int i = 0; i < A.length(); i++){
            //If zero is found then find the left and right 1's.
            if(A.charAt(i) == '0'){
                //Count the left 1's.
                int l = 0;
                for(int j = i - 1; j >= 0; j--){
                    if(A.charAt(j) == '1')
                        l++;
                    else
                        break;
                }

                //count the right 1's.
                int r = 0;
                for(int j = i + 1; j < A.length(); j++){
                    if(A.charAt(j) == '1')
                        r++;
                    else
                        break;
                }
                //if l+r < total 1's than it mence we can swap current zero with any of the 
                //remaining 1's. that mence the ans = l+r+1
                //if l+r == total 1's mence we don't have any extra 1 left so we can swap
                //current 0 with any of the left or right ends 1
                //so the ans will be l+r only
                if(l + r < count_ones)
                    ans = Math.max(ans, l+r+1);
                else
                    ans = Math.max(ans, l+r);
            }
        }
        //if ans > 0 mence at least one 0 present so return the ans
        //else return the total length
        if(ans > 0)
            return ans;
        else
            return A.length();
        // TC = O(3N) == O(N) || SC = O(1)
    }
}
