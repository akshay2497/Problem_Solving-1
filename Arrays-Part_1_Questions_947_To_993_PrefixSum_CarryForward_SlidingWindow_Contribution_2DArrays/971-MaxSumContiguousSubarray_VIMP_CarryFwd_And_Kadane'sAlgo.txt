Problem Description
Find the contiguous non empty subarray within an array, A of length N which has the largest sum.



Problem Constraints
1 <= N <= 1e6
-1000 <= A[i] <= 1000



Input Format
The first and the only argument contains an integer array, A.



Output Format
Return an integer representing the maximum possible sum of the contiguous subarray.



Example Input
Input 1:

 A = [1, 2, 3, 4, -10] 
Input 2:

 A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 


Example Output
Output 1:

 10 
Output 2:

 6 


Example Explanation
Explanation 1:

 The subarray [1, 2, 3, 4] has the maximum possible sum of 10. 
Explanation 2:

 The subarray [4,-1,2,1] has the maximum possible sum of 6. 

//Soln - java 8

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int maxSubArray(final int[] A) {
        /*
        *   Technique : Carry Forward
        *   1. Take max_sum var store INT_MINVAL in it.
        *   2.  Start first loop from 0 to N take a sum variable between 1st and 2nd loop 
        *   3.  Start second loop from i to N
        *   4.  add A[j] to sum and if it is greater than maxsum store it in max_sum
        *   5.  TC = O(N^2) SC = O(1)
        int max_sum = Integer.MIN_VALUE;
        for(int i = 0; i < A.length; i++){
            int sum = 0;
            for(int j = i; j < A.length; j++){
                sum += A[j];
                max_sum = Math.max(max_sum, sum);
            }
        }
        return max_sum;
        */
        //Kadane's Algorithm
        int max_so_far = Integer.MIN_VALUE, max_ending_here = 0;

        for (int i = 0; i < A.length; i++)
        {
            max_ending_here = max_ending_here + A[i];
            if (max_so_far < max_ending_here)
                max_so_far = max_ending_here;

            if (max_ending_here < 0)
                max_ending_here = 0;
        }
        return max_so_far;
    }
}
