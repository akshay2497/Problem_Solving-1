Problem Description
Given an array of size N, Find the subarray with least average of size k.



Problem Constraints
1<=k<=N<=1e5
-1e5<=A[i]<=1e5


Input Format
First argument contains an array A of integers of size N.
Second argument contains integer k.


Output Format
Return the index of the first element of the subarray of size k that has least average.
Array indexing starts from 0.


Example Input
Input 1:
A=[3, 7, 90, 20, 10, 50, 40]
B=3
Input 2:

A=[3, 7, 5, 20, -10, 0, 12]
B=2


Example Output
Output 1:
3
Output 2:

4


Example Explanation
Explanation 1:
Subarray between indexes 3 and 5
The subarray {20, 10, 50} has the least average 
among all subarrays of size 3.
Explanation 2:

 Subarray between [4, 5] has minimum average

//Soln - java 8

public class Solution {
    public int solve(int[] A, int B) {
        /*
        *   Technique :- Sliding Window
        *   1.  In the First loop Take the sum of first B elements find its average and store it.
        *   2.  In second loop start iterating from B add the current element to sum and remove 
                (i - B)'th element store it in sum find the avg as well and store it.
        *   3.  Check if avg is less than previous avg if yes then update the min avg value
                Also update the starting index using ((i - B) + 1) formula.
        *   4.  Finally return the starting index.
        *   5.  TC = O(B + N - B) = O(N) and SC = O(1)
        */
        int init_sum = 0;
        for(int i = 0; i < B; i++){
            init_sum += A[i];
        }
        int min_avg = init_sum;
        int start_index = 0;
        for(int i = B; i < A.length; ++i){
            init_sum = init_sum - A[i - B] + A[i];
            int avg = init_sum;
            if(avg < min_avg){
                start_index = i - B + 1;
                min_avg = avg;
            }
        }
        return start_index;
    }
}
