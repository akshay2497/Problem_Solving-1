Problem Description
You are given an integer array A of length N.
You have to find the sum of all subarray sums of A.
More formally, a subarray is a defined as a contiguous part of an array,
which we can obtain by deleting zero or more elements from either end of the array.
A subarray sum denotes the sum of all the elements of that subarray.



Problem Constraints
1 <= N <= 105
1 <= Ai <= 10 4


Input Format
The first argument is the integer array A.


Output Format
Return a single integer denoting the sum of all subarray sums of the given array.


Example Input
Input 1:
A = [1, 2, 3]
Input 2:

A = [2, 1, 3]


Example Output
Output 1:
20
Output 2:

19


Example Explanation
Explanation 1:
The different subarrays for the given array are: [1], [2], [3], [1, 2], [2, 3], [1, 2, 3].
Their sums are: 1 + 2 + 3 + 3 + 5 + 6 = 20
Explanation 2:

Similiar to the first example, the sum of all subarray sums for this array is 19.


//Soln - java 8


public class Solution {
    public long subarraySum(int[] A) {
        /*
        * Approach :-
        *   1.  We will use contribution technique to solve this problem
            2.  We know that we can find out how many times an element can appear in subarray's
                By using the formula (i+1)*(n-i) this will give us total occurances of any element
                in all subarray's
            3.  In this probles we need to find sum of all subarrys it is nothing but sum of contribution
                of of every element of array
            4.  So by using above formula we will count the occurances and simply add it to the sum
            5.  TC = O(N) and SC = O(1)
        */
        long sum = 0;
        long n = A.length;
        for(int i = 0; i < n; i++){
            long occurances_in_subarrys = (i + 1) * (n - i);
            long total_contribution = occurances_in_subarrys * A[i];
            sum += total_contribution;
        }
        return sum;
    }
}