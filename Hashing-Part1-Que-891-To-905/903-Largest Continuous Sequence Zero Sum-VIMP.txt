Problem Description

Given an array A of N integers.

Find the largest continuous sequence in a array which sums to zero.



Problem Constraints

1 <= N <= 106

-107 <= A[i] <= 107



Input Format

Single argument which is an integer array A.



Output Format

Return an array denoting the longest continuous sequence with total sum of zero.

NOTE : If there are multiple correct answers, return the sequence which occurs first in the array.



Example Input

A = [1,2,-2,4,-4]


Example Output

[2,-2,4,-4]


Example Explanation

[2,-2,4,-4] is the longest sequence with total sum of zero.

//Java 8

public class Solution {
    public ArrayList<Integer> lszero(ArrayList<Integer> A) {
        /*
        *   There are two steps:
        1.  Create cumulative sum array where ith index in this array represents 
            total sum from 1 to ith index element.
        2.  Iterate all elements of cumulative sum array and use hashing to find 
            two elements where value at ith index == value at jth index but i != j.
        3.  IF element is not present in hash in fill hash table with current element.
        */
        //Create a prefix sum array with Long because of constraints i.e. -10^7 <= A[i] <= 10^7
        //Observation :-
        //  if we want to find sum from i to j using prefix array it is given like
        //      sum(i, j) = pf[j] - pf[i-1] --eq
        //      this will give us subaray sum between i'th and j'th element
        //      So we need to find longest subarray whos sum is 0
        //      So from above equation we can say that 
        //      sum(i, j) == 0 if pf[j] == pf[i-1]
        //  So we just need to find these pairs where prefix sum at both places is same
        ArrayList<Long> pf = new ArrayList<>();
        pf.add(new Long(A.get(0)));
        for(int i = 1; i < A.size(); i++){
            pf.add(pf.get(i-1) + new Long(A.get(i)));
        }
        //Creating maxlen var to keep max len of subarray with sum 0
        int maxlen = 0;
        //We need to return the max len subarray for that we need to 
        //maintain startindex and endindex
        int startindex = -1, endindex = -1;
        //Create a HashMap to store the prefix sum elements and there occurances
        HashMap<Long, Integer> hm = new HashMap<>();
        //Edge case : if 0 comes in prefix array that means from index 0 till that 
        //      particular index, sum is zero this will handle edge case that if zero 
        //      comes in prefix array it wii count it as duplicate element
        hm.put(new Long(0), -1);
        //Now iterate over prefix array and store first occurance of each distint element
        for(int i = 0; i < A.size(); i++){
            //If map contains the ele already
            if(hm.containsKey(pf.get(i))){
                //Store the first occurance of current ele in startindexofcurrentele variable
                int startindexofcurrentele = hm.get(pf.get(i));
                //We can get the length of subarray by substracting irst occurance of current ele
                //from current index
                int templen = i - startindexofcurrentele;
                //if the maxlength is lesser than templen then it means
                //Current subarray length is greater than previous maxlength subarray
                if(templen > maxlen){
                    //then update maxlen
                    maxlen = templen;
                    //Startindex will be current ele first occurance plus 1
                    startindex = startindexofcurrentele+1;
                    //endindex will be current index i.e. i
                    endindex = i;
                }
            }else{
                //Storing first occurance i.e. index of each distinct element
                hm.put(pf.get(i), i);
            }
        }
        //System.out.println(maxlen);
        //Create new array start traversing on input array
        //from startindex to endindex and add ele in newly created array 
        ArrayList<Integer> arr = new ArrayList<>();
        if(startindex != -1 && endindex != -1){
            for(int i = startindex; i <= endindex; i++){
                arr.add(A.get(i));
            }
        }
        //Return the array
        return arr;

        //TC = O(N) || SC = O(N)
    }
}
