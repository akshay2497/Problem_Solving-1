Problem Description

Shaggy has an array A consisting of N elements. We call a pair of distinct indices in that array as a special pair if elements at that index in the array are equal.

Shaggy wants you to find a special pair such that distance between that pair is minimum. Distance between two indices is defined as |i-j|. If there is no special pair in the array then return -1.



Problem Constraints

1 <= |A| <= 105



Input Format

First and only argument is the array A.



Output Format

Return one integer corresponding to the minimum possible distance between a special pair.



Example Input

Input 1:

A = [7, 1, 3, 4, 1, 7]
Input 2:

A = [1, 1]


Example Output

Output 1:

 3
Output 2:

 1


Example Explanation

Explanation 1:

Here we have 2 options:
1. A[1] and A[4] are both 1 so (1,4) is a special pair and |1-4|=3.
2. A[0] and A[5] are both 7 so (0,5) is a special pair and |0-5|=5.
Therefore the minimum possible distance is 3. 
Explanation 2:

Only possibility is choosing A[1] and A[2].


//Java 8

public class Solution {
    public int solve(ArrayList<Integer> A) {
        /*
        *   Use hashing to choose two indices and check for matching elements, then 
            find the distance between the two matching elements. Finally, select the 
            minimum of the distances and print it on a new line.
        *   TC = O(N) || SC = O(N)
        */
        int minlen = A.size()+1;
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i = 0; i < A.size(); i++){
            if(hm.containsKey(A.get(i))){
                int startindexofcurrentele = hm.get(A.get(i));
                int templen = i - startindexofcurrentele;
                if(templen < minlen){
                    minlen = templen;
                }
            }else{
                hm.put(A.get(i), i);
            }
        }
        return minlen != A.size()+1 ? minlen : -1;
    }
}
