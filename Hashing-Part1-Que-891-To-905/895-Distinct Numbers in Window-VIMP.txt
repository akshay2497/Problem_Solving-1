Problem Description

You are given an array of N integers, A1, A2 ,â€¦, AN and an integer B. Return the of count of distinct numbers in all windows of size B.

Formally, return an array of size N-B+1 where i'th element in this array contains number of distinct elements in sequence Ai, Ai+1 ,..., Ai+B-1.

NOTE: if B > N, return an empty array.



Input Format

First argument is an integer array A
Second argument is an integer B.



Output Format

Return an integer array.



Example Input

Input 1:

 A = [1, 2, 1, 3, 4, 3]
 B = 3
Input 2:

 A = [1, 1, 2, 2]
 B = 1


Example Output

Output 1:

 [2, 3, 3, 2]
Output 2:

 [1, 1, 1, 1]


Example Explanation

Explanation 1:

 A=[1, 2, 1, 3, 4, 3] and B = 3
 All windows of size B are
 [1, 2, 1]
 [2, 1, 3]
 [1, 3, 4]
 [3, 4, 3]
 So, we return an array [2, 3, 3, 2].
Explanation 2:

 Window size is 1, so the output array is [1, 1, 1, 1].

//Java - 8

public class Solution {
    public ArrayList<Integer> dNums(ArrayList<Integer> A, int B) {
        ArrayList<Integer> ans = new ArrayList<>();
        if(B > A.size())
            return ans;
        //Creating window for the B ele in ArrayList ad adding ele and their occurances
        //in the hashmap
        HashMap<Integer, Integer> mp = new HashMap<>();
        for(int i = 0; i < B; i++){
            if(mp.containsKey(A.get(i))){
                mp.put(A.get(i), (mp.get(A.get(i)) + 1));
            }else{
                mp.put(A.get(i), 1);
            }
        }
        ans.add(mp.size());

        //Now iterate over the array but from B'th position
        for(int i = B; i < A.size(); i++){
            //Checking if key is present if present increase count else add new key
            if(mp.containsKey(A.get(i))){
                mp.put(A.get(i), (mp.get(A.get(i)) + 1));
            }else{
                mp.put(A.get(i), 1);
            }
            //Now decrease occurance of ele present at i+B position 
            mp.put(A.get(i-B), (mp.get(A.get(i-B)) - 1));
            //Now check if occurance of i-B th position ele become 0 or not
            //In this case remove that element
            if(mp.get(A.get(i-B)) == 0){
                mp.remove(A.get(i-B));
            }
            //Finally add map's current size into result array
            ans.add(mp.size());
        }
        //Finally return answer
        return ans;
        //TC = O(N) || SC = O(B)

        /*
        Approach :- 
        1.  If you have solution for window [i, i+k-1], can you quickly build solution for 
            window [i+1, i+k]?
        2.  If we have a data structure where we can maintain count of all keys and number 
            of distinct keys, then we just have to reduce count of key A[i] and increasing 
            count of A[i+k]. If count of some key has been reduced to zero, we need to 
            remove that key.
        3.  This structure is a hashmap. All operations that we have said a constant 
            time in it.
        */
    }
}
