Problem Description

Given an array of integers A, find and return whether the given array contains a non-empty subarray with a sum equal to 0.

If the given array contains a sub-array with sum zero return 1 else return 0.



Problem Constraints

1 <= |A| <= 100000

-10^9 <= A[i] <= 10^9



Input Format

The only argument given is the integer array A.



Output Format

Return whether the given array contains a subarray with a sum equal to 0.



Example Input

Input 1:

 A = [1, 2, 3, 4, 5]
Input 2:

 A = [-1, 1]


Example Output

Output 1:

 0
Output 2:

 1


Example Explanation

Explanation 1:

 No subarray has sum 0.
Explanation 2:

 The array has sum 0.

//Java - 8

public class Solution {
    public int solve(ArrayList<Integer> A) {
        /*
        *   The idea is to iterate through the array and for every element A[i],
        *   calculate sum of elements form 0 to i (this can simply be done as sum += arr[i]).
        *   If the current sum has been seen before, then there is a zero sum array.
        *   Hashing is used to store the sum values, so that we can quickly store sum and
            find out whether the current sum is seen before or not.
        */
        //Create a prefix sum array with Long because of constraints i.e. -10^7 <= A[i] <= 10^7
        //Observation :-
        //  if we want to find sum from i to j using prefix array it is given like
        //      sum(i, j) = pf[j] - pf[i-1] --eq
        //      this will give us subaray sum between i'th and j'th element
        //      So we need to find subarray whose sum is 0
        //      So from above equation we can say that 
        //      sum(i, j) == 0 if pf[j] == pf[i-1]
        //  So we just need to find these pairs where prefix sum at both places is same
        /*ArrayList<Long> pf = new ArrayList<>();
        pf.add(new Long(A.get(0)));
        for(int i = 1; i < A.size(); i++){
            pf.add(pf.get(i-1) + new Long(A.get(i)));
        }*/

        //Create hashset to store distinct ele in prefix array
        HashSet<Long> hm = new HashSet<>();
        //Edge case : if 0 comes in prefix array that means from index 0 till that 
        //      particular index, sum is zero this will handle edge case that if zero 
        //      comes in prefix array it wii count it as duplicate element 
        hm.add(new Long(0));
        long temp = 0; //we can monimize the cost of creating a prefix array just bu taking a 
        //variable and adding ele of array to it in each iteration
        //Iterate over the prefix array
        for(int i = 0; i < A.size(); i++){
            //If ele is already present in set that means that particular subarray has sum 0
            //so we can return 1 from here itself
            temp += A.get(i);
            if(hm.contains(temp)){
                return 1;
            }else{
                //If ele is not present in the set add ele into set
                hm.add(temp);
            }
        }
        //If no duplicate ele is present in pf array that means given array dont have 
        //any subarray with sum 0 so return 0
        return 0;
        //TC = O(N) || SC = O(N)
    }
}
