Problem Description
Given a string A consisting of lowercase characters.

Check if characters of the given string can be rearranged to form a palindrome.

Return 1 if it is possible to rearrange the characters of the string A such that it becomes a palindrome else return 0.



Problem Constraints
1 <= |A| <= 105

A consists only of lower-case characters.



Input Format
First argument is an string A.



Output Format
Return 1 if it is possible to rearrange the characters of the string A such that it becomes a palindrome else return 0.



Example Input
Input 1:

 A = "abcde"
Input 2:

 A = "abbaee"


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 No possible rearrangement to make the string palindrome.
Explanation 2:

 Given string "abbaee" can be rearranged to "aebbea" to form a palindrome.

//Java - 8

public class Solution {
    public int solve(String A) {
        /*
        *   Approach :- A set of characters can form a palindrome if at most one character 
            occurs odd number of times and all characters occur even number of times.
        */
        //If length is 1 then it is palindrome return 1
        if(A.length() == 1)
            return 1;
        //Hashmap to store all distinct chars and occurrance
        //add all chars and store the occurances
        HashMap<Character, Integer> hm = new HashMap<>();
        for(int i = 0; i < A.length(); i++){
            if(hm.containsKey(A.charAt(i))){
                hm.put(A.charAt(i), (hm.get(A.charAt(i)) + 1));
            }else{
                hm.put(A.charAt(i), 1);
            }
        }
        //Retriving keyset to travese over map
        Set<Character> set = hm.keySet();
        //As stated above if more than 1 char occures odd no of times then string 
        //can't be made palindrome.
        //oddcount will strore that for us
        int oddcount = 0;
        for(char key : set){
            //While iterating if oddcount is > than 1 then we can return from here only
            if(oddcount > 1)
                return 0;
            //check if char appears for odd no of times then increase the oddcount
            if(hm.get(key) % 2 != 0)
                oddcount++;
        }
        //return 0 if oddcount > 1 else return 1
        return oddcount > 1 ? 0 : 1;

        //TC = O(N) || SC = O(N)
    }
}
