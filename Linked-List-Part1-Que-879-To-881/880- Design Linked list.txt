Problem Description
Given a matrix A of size Nx3 representing operations. Your task is to design the linked list based on these operations.

There are four types of operations:

0 x -1: Add a node of value x before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.

1 x -1: Append a node of value x to the last element of the linked list.

2 x index: Add a node of value x before the indexth node in the linked list. If the index equals the length of the linked list, the node will be appended to the end of the linked list. If the index is greater than the length, the node will not be inserted.

3 index -1: Delete the indexth node in the linked list, if the index is valid.

A[i][0] represents the type of operation.

A[i][1], A[i][2] represents the corresponding elements with respect to type of operation.

Note: Indexing is 0 based.


Problem Constraints
1 <= Number of operations <= 1000
1 <= All node values <= 109


Input Format
The only argument given is matrix A.


Output Format
Return the pointer to the starting of the linked list.


Example Input
Input 1:
A = [[0, 1, -1],
     [1, 2, -1],
     [2, 3, 1]]
Input 2:

A = [[0, 1, -1],
     [1, 2, -1],
     [2, 3, 1],
     [0, 4, -1],
     [3, 1, -1],
     [3, 2, -1]]


Example Output
Output 1:
1 -> 3 -> 2 -> NULL
Output 2:

4 -> 3 -> NULL


Example Explanation
Explanation 1:
After first operation the list is 1 -> NULL
After second operation the list is 1 -> 2 -> NULL
After third operation the list is 1 -> 3 -> 2 -> NULL
Explanation 2:

After first operation the list is 1 -> NULL
After second operation the list is 1 -> 2 -> NULL
After third operation the list is 1 -> 3 -> 2 -> NULL
After fourth operation the list is 4 -> 1 -> 3 -> 2 -> NULL
After fifth operation the list is 4 -> 3 -> 2 -> NULL
After sixth operation the list is 4 -> 3 -> NULL


//Java-8

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    ListNode head=null;
    int size=0;
    public ListNode solve(ArrayList<ArrayList<Integer>> A) {
        for(int i = 0; i < A.size(); i++){
                int ops = A.get(i).get(0);
                if(ops == 0)
                    addFirst(A.get(i).get(1));
                else if(ops == 1)
                    addLast(A.get(i).get(1));
                else if(ops == 2)
                    addBeforeIndex(A.get(i).get(1), A.get(i).get(2));
                else
                    deleteAtIndex(A.get(i).get(1));
        }
        return head;
    }

    public void addFirst(int val){
        ListNode node=new ListNode(val);
        node.next=head;
        head=node;
        size+=1;
    }

    public void addLast(int val){
        ListNode node=new ListNode(val);
        ListNode ptr=head;
        if(head==null) {
            head=node;
        }
        else {
            while(ptr.next!=null) {
                ptr=ptr.next;
            }
            ptr.next=node;
        }
        size+=1;
    }

    public void addBeforeIndex(int val, int pos){
        ListNode node=new ListNode(val);
        ListNode ptr=head;
        if(pos<=size) {
            for(int k=0;k<pos-1;k++) {
                ptr=ptr.next;
            }
            if(pos==0) {
                node.next=head;
                head=node;
            }
            else if(pos==size) {
                    ptr.next=node;
            }
            else {
                node.next=ptr.next;
                ptr.next=node;
            }
            size+=1;
        }
    }

    public void deleteAtIndex(int pos){
        ListNode ptr=head;
        if(pos<size) {
            if(pos==0) {
                head=head.next;
            }
            else {
                for(int k=0;k<pos-1;k++) {
                    ptr=ptr.next;
                }
                ptr.next=ptr.next.next;
            }
            size-=1;
        }
    }
}
