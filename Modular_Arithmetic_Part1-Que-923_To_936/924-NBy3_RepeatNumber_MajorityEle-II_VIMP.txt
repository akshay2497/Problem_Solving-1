Problem Description

You're given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear 
time and constant additional space.
If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example:

Input: [1 2 3 1 1]
Output: 1 
1 occurs 3 times which is more than 5/3 times.


//Soln - java 8

public class Solution {
	// DO NOT MODIFY THE LIST
	public int repeatedNumber(final List<Integer> a) {
        /*
        *** Moore's Voting Algorithm ***
        ++++++++++++++++++++++++++++++++
        *   It is important to note that if at a given time, you have 3 distinct element 
            from the array, if you remove them from the array, your answer does not change.
        *   Assume that we maintain 2 elements with their counts as we traverse 
            along the array.
        *   When we encounter a new element, there are 3 cases possible :
            1. We donâ€™t have 2 elements yet. So add this to the list with count as 1.
            2. This element is different from the existing 2 elements. As we said before, 
               we have 3 distinct numbers now. Removing them does not change the answer. 
               So decrement 1 from count of 2 existing elements. If their count falls to 0, 
               obviously its not a part of 2 elements anymore.
            3. The new element is same as one of the 2 elements. Increment the count of that element.
            
        *   Consequently, the answer will be one of the 2 elements left behind. If they are not 
            the answer, then there is no element with count > N / 3.
        */    

        //Take four variables m1, m2 to store majority elements
        //c1, c2 to store count of them respectively 
        int m1 = 0, m2 = 0;
        int c1 = 0, c2 = 0;
        //Iterate over the array till N-1
        for(int i = 0; i < a.size(); i++){
            //First condition is if c1 == 0 then we need to assign m1 = A[i]
            //But consider if c2 != 0 and m2 == A[i](current ele) then we cant assign m1
            //so we need to check for that condition.
            if(c1 == 0 && (c2 == 0 || m2 != a.get(i))){
                m1 = a.get(i);
                c1++;
                //If current ele is distinct then no need to execute further steps so
                //write continue to nreak current iteration
                continue;
            //If first condition goes wrong then check if current ele != m1 and c2 == 0 
            //that means it is also distinct element so we can assign current ele to m2
            }else if(m1 != a.get(i) && c2 == 0){
                m2 = a.get(i);
                c2++;
                //If current ele is distinct then no need to execute further steps so
                //write continue to nreak current iteration
                continue;
            }

            //If current element is not equal to m1 and m2 then it mense all three elements are 
            //distinct so we can inorwe all elements
            if(m1 != a.get(i) && m2 != a.get(i)){
                c1--;
                c2--;
            }

            //Now check if current ele equal to m1 and c1 != 0 that means curr ele appeared
            //again so increment c1
            if(m1 == a.get(i) && c1 != 0){
                c1++;
            //else check if current ele equal to m2 and c2 != 0 that means curr ele appeared
            //again so increment c2
            }else if(m2 == a.get(i) && c2 != 0){
                c2++;
            }
        }
        //System.out.println(m1+" "+c1+" -- "+m2+" "+c2);

        //At this position we got values of probable majority ele1 and majority ele2
        //Now we need tio check if they are really majority ele or not
        //for that take two variables cnt1 and cnt2 for m1 and m2 respectively
        int cnt1 = 0, cnt2 = 0;
        //Iterate over array again if m1 == curr ele increase cnt1 
        //if m2 == curr ele increase cnt2 
        for(int i = 0; i < a.size(); i++){
            if(a.get(i) == m1)
                cnt1++;
            if(a.get(i) == m2)
                cnt2++;
        }
        int x = a.size()/3;
        //System.out.println(m1+" "+m2+" "+x+" "+cnt1+" "+cnt2);
        //System.out.println(x+" "+cnt1+" "+cnt2);

        //Now check whether m1 > n/3 or m2 > n/3 if tru return any of them or respective one
        //else return -1
        if(cnt1 > x){
            return m1;
        }
        else if(cnt2 > x){
            return m2;
        }else{
            return -1;
        }

        //TC = O(N+N) = O(N) || SC = O(1)
	}
}
