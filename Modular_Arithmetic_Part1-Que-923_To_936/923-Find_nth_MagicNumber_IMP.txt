Problem Description

Given an integer A, find and return the Ath magic number.

A magic number is defined as a number which can be expressed as a power of 5 or sum of unique powers of 5.

First few magic numbers are 5, 25, 30(5 + 25), 125, 130(125 + 5), â€¦.



Problem Constraints

1 <= A <= 5000



Input Format

The only argument given is integer A.



Output Format

Return the Ath magic number.



Example Input

Example Input 1:

 A = 3
Example Input 2:

 A = 10


Example Output

Example Output 1:

 30
Example Output 2:

 650


Example Explanation

Explanation 1:

 A in increasing order is [5, 25, 30, 125, 130, ...]
 3rd element in this is 30
Explanation 2:

 In the sequence shown in explanation 1, 10th element will be 650.


//Soln - java 8


public class Solution {
    public int solve(int A) {
        /*
        *  Approach :- 
            1. If suppose A = 3 == 011 in binary so by simple observation our ans
            should be multiply each position with power of 5 and add them up
            e.g  A = 3 =  0     1     1
                          *     *     *
                         5^3 + 5^2 + 5^1
                       =0*5^3+1*5^2+1*5^1 = 0+25+5 = 30

                observation :- it doesn't matter how may 0's are there only 1's matter
                
            2. So we can say that if we do A & 1 then we get to know whether the least
               Significant bit is 1 or not so if its 1 then simply add it to answer
            3. and in the end do A >> 1 == A / 2
            4. do this till A > 0 and after that simply return the answer
            5. TC = O(logA) || SC = O(1)     
                
        */
        int x = 1, ans = 0;
        while(A > 0){
            x = x * 5;
            if((A & 1) == 1) // it can be written as (A % 2 == 1)
                ans = ans + x;
            A = A >> 1; // it can be written as A / 2
        }
        return ans;
    }
}
