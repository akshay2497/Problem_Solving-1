Problem Description

Given an array of integers A, every element appears twice except for one. Find that single one.

NOTE: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?



Problem Constraints

2 <= |A| <= 2000000

0 <= A[i] <= INTMAX



Input Format

First and only argument of input contains an integer array A.



Output Format

Return a single integer denoting the single element.



Example Input

Input 1:

 A = [1, 2, 2, 3, 1]
Input 2:

 A = [1, 2, 2]


Example Output

Output 1:

 3
Output 2:

 1


Example Explanation

Explanation 1:

3 occurs once.
Explanation 2:

1 occurs once.


//Soln - java 8

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int singleNumber(final int[] A) {
        /*
        * Approach :-   As we know that when we use XOR operator with the same element 
                        i.e. X ^ X we will get 0 and when we use XOR 2 times with same  
                        element then we will gate the same number i.e. X^X^X = 0^X = X.
        *   1.  Here we have array with some elements apperaring twice excet one element.
        *   2.  So if we use ^ operator with all elements with array then at the end we
                will get that element which is apperaring more than 2 times.
        *   3.  TC = O(N * 4) i.e 4 is size of integers but does not matter in Big OH terms
                so TC = O(N) & SC = O(1). 
        */
        int x = 0;
        for(int i = 0; i < A.length; i++){
            x = x ^ A[i];
        }
        return x;
    }
}
