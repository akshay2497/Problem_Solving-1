Alex and Sam are very good friends. Alex is doing programming a lot these days. He has set a target A for himself. 
Initially, Alex score is zero. Alex can only double his score by doing a question or Alex can seek help from Sam 
for doing questions which will contribute 1 to Alex score. Alex wants his score to be exactly A. Also, he does not 
want to take much help from Sam.

Find and return the minimum number of times Alex needs to take help from Sam to achieve a score of exactly A.


Input Format

The only argument given is integer A.

Output Format

Return the minimum number of times help taken from Sam.
Constraints

0 <= A <= 10^9
For Example

Input 1:
    A = 5
Output 1:
    2
    Initial score : 0
    Takes help from Sam, score : 1
    Alex solves a question, score : 2
    Alex solves a question, score : 4
    Takes help from Sam, score: 5

Input 2:
    A = 3
Output 2:
    2
    Initial score : 0
    Takes help from Sam, score : 1
    Alex solves a question, score : 2
    Takes help from Sam, score : 3

//Soln - java 8

public class Solution {
    public int solve(int A) {
        /*
        *   The problem is asking to find the no of set bits in A.
            1. If we use bitwise AND & with a number we will get to know the last bit 
               is set or not i.e. 5 & 1 == 0 1 0 1 & 0 0 0 1 == 0 0 0 1 == 1 -- decimal
            2. If we use right shift 1 then all bits of given number are shifted to 
               right by one place 
            3. By using these two operation on a number we can find no of set bits 
            Time Complexity : O( log(A) )
        */
        int count = 0;
        while(A > 0){
            if((A & 1) == 1)
                count++;
            A = A >> 1;
        }
        return count;
    }
}
