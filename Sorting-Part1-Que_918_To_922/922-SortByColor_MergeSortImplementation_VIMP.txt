Problem Description

Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: Using library sort function is not allowed.



Problem Constraints

1 <= N <= 1000000
0 <= A[i] <= 2


Input Format

First and only argument of input contains an integer array A.


Output Format

Return an integer array in asked order


Example Input

Input 1 :
    A = [0 1 2 0 1 2]
Input 2:

    A = [0]


Example Output

Output 1:
    [0 0 1 1 2 2]
Output 2:

    [0]


Example Explanation

Explanation 1:
    [0 0 1 1 2 2] is the required order.


//Soln - java 8


public class Solution {
    public int[] sortColors(int[] A) {
        mergeSort(A, 0, A.length-1);
        return A;
    }
    public static void mergeSort(int[] arr, int left, int right) {
		// if partition is invalid or have single element, then return
		if(left >= right)
			return;
		// divide array in two equal partitions
		int mid = (left + right) / 2;
		// sort left partition [left to mid]
		mergeSort(arr, left, mid);
		// sort right partition [mid+1 to right]
		mergeSort(arr, mid+1, right);
		// create temp array to accomodate both partitions
		int[] temp = new int[right - left + 1];
		// merge two sorted partitions into temp array
		int i = left, j = mid+1, k = 0;
		// compare elements from both partitions and copy the smaller one 
		// (until any one partition is done)
		while(i <= mid && j <= right) {
			if(arr[i] < arr[j])
				temp[k++] = arr[i++];
			else
				temp[k++] = arr[j++];
		}
		// copy remaining elements from other partition
		while(i <= mid)
			temp[k++] = arr[i++];
		while(j <= right)
			temp[k++] = arr[j++];
		// overwrite temp array back to original array
		for(i = 0; i < temp.length; i++)
			arr[left + i] = temp[i];
	}
}
